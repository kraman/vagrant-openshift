# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = "2"
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network :private_network, ip: "192.168.33.10"

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  # config.ssh.forward_agent = true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Box to load when booting the vagrant VM. This section applicable only to VirtualBox.
  # Other providers may override this value
  config.vm.box     = "<%= box_info[:virtualbox][:box_name] %>"
  config.vm.box_url = "<%= box_info[:virtualbox][:box_url] %>"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider :virtualbox do |vb|
     # Don't boot with headless mode
     vb.gui = true

     # Use VBoxManage to customize the VM. For example to change memory:
     vb.customize ["modifyvm", :id, "--memory", "2048"]
     #vb.customize ["modifyvm", :id, "--cpus", "2"]
  end

  config.vm.provider :aws do |aws, override|
    # You will need the latest AWS plugin for vagrant
    # https://github.com/mitchellh/vagrant-aws

    aws_creds_file = Pathname.new(File.expand_path("<%= box_info[:aws_creds_file]%>"))
    aws_creds = aws_creds_file.exist? ? Hash[*(File.open('.awscred_complete').readlines.map {|l| l.strip }.select {|l| not '' == l and not l.start_with? '#' and not l.start_with? '['}.map {|l| l.split '=' })] : {}

    aws.access_key_id    = aws_creds["AWSAccessKeyId"] || "AWS ACCESS KEY"
    aws.secret_access_key = aws_creds["AWSSecretKey"] || "AWS SECRET KEY"
    aws.keypair_name      = aws_creds["AWSKeyPairName"] || "AWS KEYPAIR NAME"
    override.ssh.private_key_path  = aws_creds["AWSPrivateKeyPath"] || "PATH TO AWS KEYPAIR PRIVATE KEY"

    override.vm.box = "dummy"
    override.vm.box_url = "https://github.com/mitchellh/vagrant-aws/raw/master/dummy.box"

    aws.ami = "<%= box_info[:aws][:ami] %>"
    aws.region = "<%= box_info[:aws][:ami_region] %>"
    override.ssh.username = "<%= box_info[:aws][:ami_ssh_user] %>"
    aws.instance_type = "m3.large"
    aws.tags = { "Name" => "<%= box_info[:aws][:machine_name] %>" }
    aws.user_data = %{
#cloud-config

growpart:
  mode: auto
  devices: ['/']
runcmd:
- [ sh, -xc, "echo 'Defaults:<%= box_info[:aws][:ami_ssh_user] %> \!requiretty' >> /etc/sudoers"]
    }
    <% if box_info[:os] == :centos %>
      aws.block_device_mapping = [
        {
           "DeviceName" => "/dev/sda",
           "Ebs.VolumeSize" => <%= box_info[:aws][:ebs_volume_size] %>
        }
      ]
    <% end %>
  end

  config.vm.hostname  = 'broker.example.com'
  config.vm.provision   :openshift
  config.vm.guest     = :<%= box_info[:vagrant_guest]%>

  # Domain zone under which application will be created. Eg: appname.namespace.example.com
  config.openshift.cloud_domain = "example.com"

  # Packages that are part of OpenShift Origin code but should not be compiled or installed
<% if box_info[:os] == :fedora %>
  config.openshift.ignore_packages = [
    'openshift-origin-util-scl',
    'rubygem-openshift-origin-container-libvirt',
    'openshift-origin-cartridge-jbosseap',
    'openshift-origin-cartridge-jbossews',
  ]
<% else %>
  config.openshift.ignore_packages = [
    'openshift-origin-util',
    'rubygem-openshift-origin-container-libvirt',
    'openshift-origin-cartridge-jbosseap',
    'openshift-origin-cartridge-jbossews',
    'openshift-origin-cartridge-jbossas',

    'avahi-cname-manager',
    'rubygem-openshift-origin-dns-avahi',
    'openshift-origin-cartridge-mariadb',
  ]
<% end %>

# Any additional services on the machine which should be restarted after installing OpenShift packages
# config.openshift.additional_services = [
# ]

# Advanced settings to be copied into puppet manifest
# config.openshift.advanced_puppet_values = {
# }
end
